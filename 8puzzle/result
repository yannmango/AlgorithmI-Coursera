See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     FAILED (1 warning)
PMD:          FAILED (4 warnings)
Checkstyle:   FAILED (0 errors, 40 warnings)

Correctness:  45/46 tests passed
Memory:       13/13 tests passed
Timing:       70/125 tests passed

Aggregate score: 89.90%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
7.0K Aug  8 17:41 Board.java
3.0K Aug  8 17:41 Solver.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Board.java
*-----------------------------------------------------------

% javac Solver.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Board:

Solver:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------
M D UP_UNUSED_PARAMETER UP: Static or private method Board.generateRandomIndex(int[][]) has unused parameters  At Board.java:[lines 138-147]
Warnings generated: 1


================================================================


% pmd *.java
*-----------------------------------------------------------
Board.java:137: Avoid unused parameter variables, such as 'array'. [UnusedFormalParameter]
Solver.java:10: The private instance (or static) variable 'solvable' can be made 'final'; it is initialized only in the declaration or constructor. [ImmutableField]
Solver.java:55: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
Solver.java:85: Avoid using assignment statements in expressions; this can make code harder to read. [AssignmentInOperand]
PMD ends with 4 warnings.


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] Board.java:1:8: Unused import statement for 'java.util.Arrays'. [UnusedImports]
[WARN] Board.java:5:8: Unused import statement for 'edu.princeton.cs.algs4.In'. [UnusedImports]
[WARN] Board.java:6:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] Board.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Board.java:14:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:14:78: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:17:41: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:19:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:35:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:51:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:65:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:67:23: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:76:13: The local (or parameter) variable 'len' has the same name as an instance variable. Use a different name. [HiddenField]
[WARN] Board.java:79:47: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] Board.java:81:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:88:16: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:98:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:99:30: Typecast is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:104:27: ';' is preceded with whitespace. [NoWhitespaceBefore]
[WARN] Board.java:127:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:129:19: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:144:10: '}' is not followed by whitespace. [WhitespaceAround]
[WARN] Board.java:144:15: 'while' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:175:42: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Board.java:179:27: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:179:29: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:179:31: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:179:33: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Board.java:187:45: '{' is not followed by whitespace. [WhitespaceAround]
[WARN] Solver.java:6:8: Unused import statement for 'edu.princeton.cs.algs4.StdOut'. [UnusedImports]
[WARN] Solver.java:10:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Solver.java:13:13: The instance (or static) variable 'moves' must be private. [VisibilityModifier]
[WARN] Solver.java:14:15: The instance (or static) variable 'present' must be private. [VisibilityModifier]
[WARN] Solver.java:15:14: The instance (or static) variable 'previous' must be private. [VisibilityModifier]
[WARN] Solver.java:40:46: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:42:14: 'while' is not followed by whitespace. [WhitespaceAround]
[WARN] Solver.java:56:23: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Solver.java:65:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Solver.java:78:19: The class 'priorityComparable' must start with an uppercase letter and use CamelCase. [TypeName]
...
Checkstyle ends with 0 errors and 40 warnings.

% custom checkstyle checks for Board.java
*-----------------------------------------------------------

% custom checkstyle checks for Solver.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Board
*-----------------------------------------------------------
Running 22 total tests.

Tests 5, 6, 13, and 14 rely upon toString() returning results in prescribed format.

Test 1a: check hamming() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 1b: check hamming() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 2a: check manhattan() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle07.txt
  * puzzle17.txt
  * puzzle27.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 2b: check manhattan() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 3: check dimension() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
==> passed

Test 4a: check toString() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 4b: check toString() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 5a: check neighbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 5b: check neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
  * 127-by-127
==> passed

Test 6a: check neighbors() of neigbors() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 6b: check neighbors() of neighbors() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 7a: check twin() with file inputs
  * puzzle04.txt
  * puzzle00.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
==> passed

Test 7b: check twin() with random n-by-n boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 9-by-9
  * 10-by-10
==> passed

Test 8a: check isGoal() on file inputs
  * puzzle00.txt
  * puzzle04.txt
  * puzzle16.txt
  * puzzle06.txt
  * puzzle09.txt
  * puzzle23.txt
  * puzzle2x2-unsolvable1.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-00.txt
  * puzzle4x4-00.txt
==> passed

Test 8b: check isGoal() on n-by-n goal boards
  * 2-by-2
  * 3-by-3
  * 4-by-4
  * 5-by-5
  * 6-by-6
  * 100-by-100
==> passed

Test 9: check whether two Board objects can be created at the same time
  * random 3-by-3 and 3-by-3 boards
  * random 4-by-4 and 4-by-4 boards
  * random 2-by-2 and 2-by-2 boards
  * random 3-by-3 and 4-by-4 boards
  * random 4-by-4 and 3-by-3 boards
==> passed

Test 10a: check equals()
  * reflexive
  * symmetric
  * corresponding array elements are equal
  * argument is object of type String
  * argument is object of type Object
  * argument is null
  * argument is Board of different dimension
==> passed

Test 10b: check equals() on m-by-m vs. n-by-n goal boards
  * m = 2, n = 2
  * m = 3, n = 3
  * m = 4, n = 4
  * m = 2, n = 5
  * m = 5, n = 2
==> passed

Test 11: check that Board is immutable by changing argument array after
         construction and making sure Board does not mutate
==> passed

Test 12: check that Board is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle10.txt
  * puzzle20.txt
  * puzzle30.txt
  * 2-by-2
  * 3-by-3
  * 4-by-4
==> passed

Test 13: check hamming() on a board that is kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed

Test 14: check manhattan() on a board that is a kth-neighbor of a board
  * 0th neighbor of puzzle27.txt
  * 1th neighbor of puzzle27.txt
  * 2th neighbor of puzzle27.txt
  * 13th neighbor of puzzle27.txt
  * 13th neighbor of puzzle00.txt
  * 13th neighbor of puzzle2x2-unsolvable1.txt
==> passed


Total: 22/22 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Analyzing memory of Board
*-----------------------------------------------------------
Running 10 total tests.

Memory usage of an n-by-n board
[ must be at most 4n^2 + 32n + 64 bytes ]


              n       student (bytes)    reference (bytes)
----------------------------------------------------------
=> passed     2           136                  128
=> passed     3           200                  192
=> passed     4           248                  240
=> passed     8           568                  560
=> passed    12          1016                 1008
=> passed    16          1592                 1584
=> passed    20          2296                 2288
=> passed    37          6864                 6856
=> passed    72         23096                23088
=> passed   120         61496                61488
==> 10/10 tests passed

Total: 10/10 tests passed!

Student   memory = 4.00 n^2 + 32.00 n + 56.00   (R^2 = 1.000)
Reference memory = 4.00 n^2 + 32.00 n + 48.00   (R^2 = 1.000)

================================================================



********************************************************************************
*  TESTING CORRECTNESS (substituting reference Board)
********************************************************************************

Testing correctness of Solver
*-----------------------------------------------------------
Running 24 total tests.

Test 1a: call moves() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 1b: call solution() with file inputs
  * puzzle00.txt
  * puzzle01.txt
  * puzzle02.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle06.txt
  * puzzle07.txt
  * puzzle08.txt
  * puzzle09.txt
  * puzzle10.txt
  * puzzle11.txt
  * puzzle12.txt
  * puzzle13.txt
==> passed

Test 2a: call moves() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 2b: call solution() with more file inputs
  * puzzle14.txt
  * puzzle15.txt
  * puzzle16.txt
  * puzzle17.txt
  * puzzle18.txt
  * puzzle19.txt
  * puzzle20.txt
  * puzzle21.txt
  * puzzle22.txt
  * puzzle23.txt
  * puzzle24.txt
  * puzzle25.txt
  * puzzle26.txt
  * puzzle27.txt
  * puzzle28.txt
  * puzzle29.txt
  * puzzle30.txt
  * puzzle31.txt
==> passed

Test 3a: call moves() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 3b: call solution() with random solvable n-by-n boards
  * 1000 random 3-by-3 boards that are exactly 1 move from goal
  * 1000 random 3-by-3 boards that are exactly 2 moves from goal
  * 1000 random 3-by-3 boards that are exactly 3 moves from goal
  * 1000 random 3-by-3 boards that are exactly 4 moves from goal
  * 1000 random 3-by-3 boards that are exactly 5 moves from goal
  * 1000 random 3-by-3 boards that are exactly 6 moves from goal
  * 1000 random 3-by-3 boards that are exactly 7 moves from goal
  * 1000 random 3-by-3 boards that are exactly 8 moves from goal
  * 1000 random 3-by-3 boards that are exactly 9 moves from goal
  * 1000 random 3-by-3 boards that are exactly 10 moves from goal
  * 1000 random 3-by-3 boards that are exactly 11 moves from goal
  * 1000 random 3-by-3 boards that are exactly 12 moves from goal
==> passed

Test 4: create two Solver objects at the same time
  * puzzle04.txt and puzzle04.txt
  * puzzle00.txt and puzzle04.txt
  * puzzle04.txt and puzzle00.txt
==> passed

Test 5a: call isSolvable() with file inputs
  * puzzle01.txt
  * puzzle03.txt
  * puzzle04.txt
  * puzzle17.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 5b: call isSolvable() on random n-by-n boards
  * 100 random 2-by-2 boards
==> passed

Test 6: call moves() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 7: call solution() on unsolvable puzzles
  * puzzle2x2-unsolvable1.txt
  * puzzle2x2-unsolvable2.txt
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
==> passed

Test 8a: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-05.txt
  * puzzle3x3-10.txt
  * random 2-by-2 solvable boards
==> passed

Test 8b: check that Solver is immutable by testing whether methods
         return the same value, regardless of order in which called
  * puzzle3x3-unsolvable1.txt
  * puzzle3x3-unsolvable2.txt
  * puzzle4x4-unsolvable.txt
  * random 2-by-2 unsolvable boards
==> passed

Test 9: check whether equals() method in Board is called
        with an argument of the wrong type
  * puzzle00.txt
  * puzzle04.txt
  * puzzle05.txt
  * puzzle10.txt
==> passed

Test 10: Check whether equals() method in Board is always called
         with a neighbor of a neighbor as an argument
         (critical optimization)
  * puzzle00.txt
  * puzzle04.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         0  1  3 
         4  2  5 
         7  8  6 

    - board 2:
        3
         1  2  3 
         4  8  5 
         7  0  6 

  * puzzle05.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        3
         4  1  3 
         0  2  6 
         7  5  8 

    - board 2:
        3
         1  2  3 
         4  0  6 
         7  5  8 

  * puzzle10.txt
    - equals() compares a board to a board that is not a neighbor of a neighbor
    - this suggests a bug in the critical optimization
    - board 1:
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64  0 65 67 68 78 69 70 72 
        73 74 66 75 76 77 79 71 80 

    - board 2:
        9
         1  2  3  4  5  6  7  8  9 
        10 11 12 13 14 15 16 17 18 
        19 20 21 22 23 24 25 26 27 
        28 29 30 31 32 33 34 35 36 
        37 38 39 40 41 42 43 44 45 
        46 47 48 49 50 51 52 53 54 
        55 56 57 58 59 60 61 62 63 
        64 65 66 67 68 78 69 70 72 
        73 74 75  0 76 77 79 71 80 

==> FAILED

Test 11: check that constructor throws exception if board is null
==> passed

Test 12a: call moves() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 12b: call solution() with 2-by-2 file inputs
  * puzzle2x2-00.txt
  * puzzle2x2-01.txt
  * puzzle2x2-02.txt
  * puzzle2x2-03.txt
  * puzzle2x2-04.txt
  * puzzle2x2-05.txt
  * puzzle2x2-06.txt
==> passed

Test 13a: call moves() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 13b: call solution() with 3-by-3 file inputs
  * puzzle3x3-00.txt
  * puzzle3x3-01.txt
  * puzzle3x3-02.txt
  * puzzle3x3-03.txt
  * puzzle3x3-04.txt
  * puzzle3x3-05.txt
  * puzzle3x3-06.txt
  * puzzle3x3-07.txt
  * puzzle3x3-08.txt
  * puzzle3x3-09.txt
  * puzzle3x3-10.txt
  * puzzle3x3-11.txt
  * puzzle3x3-12.txt
  * puzzle3x3-13.txt
  * puzzle3x3-14.txt
  * puzzle3x3-15.txt
  * puzzle3x3-16.txt
  * puzzle3x3-17.txt
  * puzzle3x3-18.txt
  * puzzle3x3-19.txt
  * puzzle3x3-20.txt
  * puzzle3x3-21.txt
  * puzzle3x3-22.txt
  * puzzle3x3-23.txt
  * puzzle3x3-24.txt
  * puzzle3x3-25.txt
  * puzzle3x3-26.txt
  * puzzle3x3-27.txt
  * puzzle3x3-28.txt
  * puzzle3x3-29.txt
  * puzzle3x3-30.txt
==> passed

Test 14a: call moves() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 14b: call solution() with 4-by-4 file inputs
  * puzzle4x4-00.txt
  * puzzle4x4-01.txt
  * puzzle4x4-02.txt
  * puzzle4x4-03.txt
  * puzzle4x4-04.txt
  * puzzle4x4-05.txt
  * puzzle4x4-06.txt
  * puzzle4x4-07.txt
  * puzzle4x4-08.txt
  * puzzle4x4-09.txt
  * puzzle4x4-10.txt
  * puzzle4x4-11.txt
  * puzzle4x4-12.txt
  * puzzle4x4-13.txt
  * puzzle4x4-14.txt
  * puzzle4x4-15.txt
  * puzzle4x4-16.txt
  * puzzle4x4-17.txt
  * puzzle4x4-18.txt
  * puzzle4x4-19.txt
  * puzzle4x4-20.txt
  * puzzle4x4-21.txt
  * puzzle4x4-22.txt
  * puzzle4x4-23.txt
  * puzzle4x4-24.txt
  * puzzle4x4-25.txt
  * puzzle4x4-26.txt
  * puzzle4x4-27.txt
  * puzzle4x4-28.txt
  * puzzle4x4-29.txt
  * puzzle4x4-30.txt
==> passed

Test 15a: call moves() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed

Test 15b: call solution() with random solvable n-by-n boards
  * 100 random 2-by-2 boards that are <= 6 moves from goal
  * 200 random 3-by-3 boards that are <= 20 moves from goal
  * 200 random 4-by-4 boards that are <= 20 moves from goal
  * 200 random 5-by-5 boards that are <= 20 moves from goal
==> passed


Total: 23/24 tests passed!


================================================================
********************************************************************************
*  MEMORY (substituting reference Board)
********************************************************************************

Analyzing memory of Solver
*-----------------------------------------------------------
Running 3 total tests.

Test 1: memory with puzzle20.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 2936 bytes
  - memory of reference Solver = 4896 bytes
  - student / reference        = 0.60
==> passed

Test 2: memory with puzzle25.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 3616 bytes
  - memory of reference Solver = 6056 bytes
  - student / reference        = 0.60
==> passed

Test 3: memory with puzzle30.txt (must be <= 2.0x reference solution)
  - memory of student   Solver = 4296 bytes
  - memory of reference Solver = 7216 bytes
  - student / reference        = 0.60
==> passed


Total: 3/3 tests passed!

================================================================



********************************************************************************
*  TIMING (substituting reference Board)                                                                  
********************************************************************************

Timing Solver
*-----------------------------------------------------------
Running 125 total tests.

Maximum allowed time per puzzle is 5.0 seconds.

Test 1: measure CPU time and check correctness

               filename   moves    n  seconds
---------------------------------------------
=> passed  puzzle20.txt      20    3     0.02 
=> passed  puzzle22.txt      22    3     0.01 
=> passed  puzzle21.txt      21    3     0.01 
=> passed  puzzle23.txt      23    3     0.01 
=> passed  puzzle24.txt      24    3     0.01 
=> passed  puzzle25.txt      25    3     0.01 
=> passed  puzzle27.txt      27    3     0.01 
=> passed  puzzle29.txt      29    3     0.03 
=> passed  puzzle26.txt      26    3     0.01 
=> passed  puzzle28.txt      28    3     0.02 
=> passed  puzzle30.txt      30    3     0.05 
=> passed  puzzle31.txt      31    3     0.04 
=> passed  puzzle39.txt      39    4     0.63 
=> passed  puzzle41.txt      41    5     0.07 
=> passed  puzzle34.txt      34    4     0.21 
=> passed  puzzle37.txt      37    4     0.23 
=> passed  puzzle44.txt      44    5     0.13 
=> passed  puzzle32.txt      32    4     1.05 
=> passed  puzzle35.txt      35    4     0.59 
=> passed  puzzle33.txt      33    4     0.46 
=> passed  puzzle43.txt      43    4     1.00 
=> passed  puzzle46.txt      46    4     1.04 
=> passed  puzzle40.txt      40    4     1.12 
=> passed  puzzle36.txt      36    4     1.83 
=> passed  puzzle45.txt      45    4     0.83 
==> 25/25 tests passed



Test 2: count MinPQ operations

               filename   insert()         delMin()      max PQ size
--------------------------------------------------------------------
=> passed  puzzle20.txt       1270              760              511         
=> passed  puzzle22.txt       2951             1743             1209         
=> passed  puzzle21.txt       5310             3148             2163         
=> passed  puzzle23.txt       7424             4431             2994         
=> passed  puzzle24.txt       5725             3441             2285         
=> passed  puzzle25.txt      10830             6429             4402         
=> passed  puzzle27.txt      11778             7091             4688         
=> FAILED  puzzle29.txt      25049   (1.4x)   15008   (1.4x)   10042   (1.5x)
=> passed  puzzle26.txt      13208             7875             5334         
=> passed  puzzle28.txt      23153            13871             9283         
=> passed  puzzle30.txt      45528            27543            17986         
=> passed  puzzle31.txt      41174            24756            16419         
=> FAILED  puzzle39.txt     515604   (4.8x)  251731   (4.8x)  263874   (4.8x)
=> passed  puzzle41.txt      63117            26659            36459         
=> FAILED  puzzle34.txt     269533   (1.2x)  129636   (1.2x)  139898   (1.2x)
=> FAILED  puzzle37.txt     290463   (1.2x)  139296   (1.2x)  151168   (1.2x)
=> passed  puzzle44.txt     151576            67344            84233         
=> FAILED  puzzle32.txt    1032231   (1.3x)  493422   (1.3x)  538810   (1.3x)
=> passed  puzzle35.txt     555057           270095           284963         
=> passed  puzzle33.txt     548422           261600           286823         
=> passed  puzzle43.txt    1194583           576678           617906         
=> passed  puzzle46.txt    1187683           591596           596088         
=> passed  puzzle40.txt    1270257           620158           650100         
=> passed  puzzle36.txt    2173373          1037642          1135732         
=> passed  puzzle45.txt    1051265           513752           537514         
==> 20/25 tests passed



Test 3: count Board operations (that should not get called)

               filename    hamming()   toString()     tileAt()
--------------------------------------------------------------
=> passed  puzzle20.txt            0            0            0         
=> passed  puzzle22.txt            0            0            0         
=> passed  puzzle21.txt            0            0            0         
=> passed  puzzle23.txt            0            0            0         
=> passed  puzzle24.txt            0            0            0         
=> passed  puzzle25.txt            0            0            0         
=> passed  puzzle27.txt            0            0            0         
=> passed  puzzle29.txt            0            0            0         
=> passed  puzzle26.txt            0            0            0         
=> passed  puzzle28.txt            0            0            0         
=> passed  puzzle30.txt            0            0            0         
=> passed  puzzle31.txt            0            0            0         
=> passed  puzzle39.txt            0            0            0         
=> passed  puzzle41.txt            0            0            0         
=> passed  puzzle34.txt            0            0            0         
=> passed  puzzle37.txt            0            0            0         
=> passed  puzzle44.txt            0            0            0         
=> passed  puzzle32.txt            0            0            0         
=> passed  puzzle35.txt            0            0            0         
=> passed  puzzle33.txt            0            0            0         
=> passed  puzzle43.txt            0            0            0         
=> passed  puzzle46.txt            0            0            0         
=> passed  puzzle40.txt            0            0            0         
=> passed  puzzle36.txt            0            0            0         
=> passed  puzzle45.txt            0            0            0         
==> 25/25 tests passed



Test 4a: count Board operations (that should get called)

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2027               12590   (3.7x)      19790         
=> FAILED  puzzle22.txt       4691               34027   (4.1x)      49245         
=> FAILED  puzzle21.txt       8463               62683   (7.4x)      99418   (1.1x)
=> FAILED  puzzle23.txt      11852               94233   (7.4x)     139535         
=> FAILED  puzzle24.txt       9163               70569   (5.4x)     105047         
=> FAILED  puzzle25.txt      17256              148101   (6.0x)     207189         
=> FAILED  puzzle27.txt      18867              162228   (6.0x)     223881         
=> FAILED  puzzle29.txt      40054   (1.4x)     414659  (14.8x)     527944   (1.5x)
=> FAILED  puzzle26.txt      21080              195459   (6.9x)     259311         
=> FAILED  puzzle28.txt      37023              352805   (5.4x)     492281         
=> FAILED  puzzle30.txt      73086              748447   (7.2x)    1050957         
=> FAILED  puzzle31.txt      65927              714368   (6.5x)     887262         
=> FAILED  puzzle39.txt     767361   (4.8x)    9558310  (59.9x)   12829665   (6.1x)
=> FAILED  puzzle41.txt      89773             1085482   (4.3x)    1231535         
=> FAILED  puzzle34.txt     399216   (1.2x)    4616110  (13.7x)    6291240   (1.2x)
=> FAILED  puzzle37.txt     429769   (1.2x)    5384721  (14.5x)    6873776   (1.2x)
=> FAILED  puzzle44.txt     218919             2845850   (4.8x)    3208636         
=> FAILED  puzzle32.txt    1526599   (1.3x)   18220880  (15.8x)   27942500   (1.4x)
=> FAILED  puzzle35.txt     825246             9644821   (8.2x)   13889021         
=> FAILED  puzzle33.txt     810312             9788103   (7.1x)   13979592         
=> FAILED  puzzle43.txt    1771301            25508395  (10.9x)   31170010         
=> FAILED  puzzle46.txt    1779276            28009998  (12.1x)   31295220         
=> FAILED  puzzle40.txt    1890530            26968409  (10.9x)   32881154         
=> FAILED  puzzle36.txt    3211466            43674904   (9.4x)   61566316         
=> FAILED  puzzle45.txt    1565045            21883927   (4.0x)   26402888         
==> 0/25 tests passed



Test 4b: count Board operations (that should get called),
         rejecting if doesn't adhere to stricter caching limits

               filename    Board()            equals()         manhattan()
--------------------------------------------------------------------------
=> FAILED  puzzle20.txt       2027               12590   (3.7x)      19790   (5.8x)
=> FAILED  puzzle22.txt       4691               34027   (4.1x)      49245   (5.9x)
=> FAILED  puzzle21.txt       8463               62683   (7.4x)      99418  (11.8x)
=> FAILED  puzzle23.txt      11852               94233   (7.4x)     139535  (11.0x)
=> FAILED  puzzle24.txt       9163               70569   (5.4x)     105047   (8.1x)
=> FAILED  puzzle25.txt      17256              148101   (6.0x)     207189   (8.4x)
=> FAILED  puzzle27.txt      18867              162228   (6.0x)     223881   (8.3x)
=> FAILED  puzzle29.txt      40054   (1.4x)     414659  (14.8x)     527944  (18.8x)
=> FAILED  puzzle26.txt      21080              195459   (6.9x)     259311   (9.1x)
=> FAILED  puzzle28.txt      37023              352805   (5.4x)     492281   (7.6x)
=> FAILED  puzzle30.txt      73086              748447   (7.2x)    1050957  (10.1x)
=> FAILED  puzzle31.txt      65927              714368   (6.5x)     887262   (8.0x)
=> FAILED  puzzle39.txt     767361   (4.8x)    9558310  (59.9x)   12829665  (80.3x)
=> FAILED  puzzle41.txt      89773             1085482   (4.3x)    1231535   (4.9x)
=> FAILED  puzzle34.txt     399216   (1.2x)    4616110  (13.7x)    6291240  (18.7x)
=> FAILED  puzzle37.txt     429769   (1.2x)    5384721  (14.5x)    6873776  (18.6x)
=> FAILED  puzzle44.txt     218919             2845850   (4.8x)    3208636   (5.4x)
=> FAILED  puzzle32.txt    1526599   (1.3x)   18220880  (15.8x)   27942500  (24.2x)
=> FAILED  puzzle35.txt     825246             9644821   (8.2x)   13889021  (11.8x)
=> FAILED  puzzle33.txt     810312             9788103   (7.1x)   13979592  (10.1x)
=> FAILED  puzzle43.txt    1771301            25508395  (10.9x)   31170010  (13.3x)
=> FAILED  puzzle46.txt    1779276            28009998  (12.1x)   31295220  (13.5x)
=> FAILED  puzzle40.txt    1890530            26968409  (10.9x)   32881154  (13.3x)
=> FAILED  puzzle36.txt    3211466            43674904   (9.4x)   61566316  (13.2x)
=> FAILED  puzzle45.txt    1565045            21883927   (4.0x)   26402888   (4.9x)
==> 0/25 tests passed


Total: 70/125 tests passed!


================================================================


