See the Assessment Guide for information on how to interpret this report.

ASSESSMENT SUMMARY

Compilation:  PASSED
API:          PASSED

Findbugs:     PASSED
PMD:          PASSED
Checkstyle:   FAILED (0 errors, 47 warnings)

Correctness:  41/41 tests passed
Memory:       1/1 tests passed
Timing:       41/41 tests passed

Aggregate score: 100.00%
[Compilation: 5%, API: 5%, Findbugs: 0%, PMD: 0%, Checkstyle: 0%, Correctness: 60%, Memory: 10%, Timing: 20%]

ASSESSMENT DETAILS

The following files were submitted:
----------------------------------
1.6K Jul 31 12:59 BruteCollinearPoints.java
2.9K Jul 31 12:59 FastCollinearPoints.java
3.7K Jul 31 12:59 Point.java


********************************************************************************
*  COMPILING                                                                    
********************************************************************************


% javac Point.java
*-----------------------------------------------------------

% javac BruteCollinearPoints.java
*-----------------------------------------------------------

% javac FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


Checking the APIs of your programs.
*-----------------------------------------------------------
Point:

BruteCollinearPoints:

FastCollinearPoints:

================================================================


********************************************************************************
*  CHECKING STYLE AND COMMON BUG PATTERNS                                       
********************************************************************************


% findbugs *.class
*-----------------------------------------------------------

================================================================


% pmd *.java
*-----------------------------------------------------------


================================================================


% checkstyle *.java
*-----------------------------------------------------------
[WARN] BruteCollinearPoints.java:5:1: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] BruteCollinearPoints.java:10:45: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:15:40: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:16:69: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:16:94: '==' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:16:96: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:17:102: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:18:63: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:29:38: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:33:30: ';' is not followed by whitespace. [WhitespaceAfter]
[WARN] BruteCollinearPoints.java:33:33: '<' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:41:11: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:41:46: '==' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:42:12: 'for' is not followed by whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:42:29: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] BruteCollinearPoints.java:43:15: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:10:5: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] FastCollinearPoints.java:14:13: The local variable 'N' must start with a lowercase letter and use camelCase. [LocalVariableName]
[WARN] FastCollinearPoints.java:14:14: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:14:15: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:25:15: '//' or '/*' is not followed by whitespace. [IllegalTokenText]
[WARN] FastCollinearPoints.java:26:30: '<' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:27: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:28: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:35:58: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:36:85: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:41:40: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:42:71: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:51:32: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] FastCollinearPoints.java:52:63: '{' is not preceded with whitespace. [WhitespaceAround]
[WARN] Point.java:52:9: File contains tab characters (this is the first occurrence). Configure your editor to replace tabs with spaces. [FileTabCharacter]
[WARN] Point.java:88:17: Use the primitive type instead of the corresponding wrapper type. For example, use 'boolean' instead of 'Boolean'. [MyIllegalType]
[WARN] Point.java:89:19: 'if' is not followed by whitespace. [WhitespaceAround]
[WARN] Point.java:113:17: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Point.java:113:18: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Point.java:113:34: ',' is not followed by whitespace. [WhitespaceAfter]
[WARN] Point.java:114:17: '=' is not preceded with whitespace. [WhitespaceAround]
[WARN] Point.java:114:18: '=' is not followed by whitespace. [WhitespaceAround]
[WARN] Point.java:114:34: ',' is preceded with whitespace. [NoWhitespaceBefore]
...
Checkstyle ends with 0 errors and 47 warnings.

% custom checkstyle checks for Point.java
*-----------------------------------------------------------

% custom checkstyle checks for BruteCollinearPoints.java
*-----------------------------------------------------------

% custom checkstyle checks for FastCollinearPoints.java
*-----------------------------------------------------------


================================================================


********************************************************************************
*  TESTING CORRECTNESS
********************************************************************************

Testing correctness of Point
*-----------------------------------------------------------
Running 3 total tests.

Test 1: p.slopeTo(q)
  * positive infinite slope, where p and q have coordinates in [0, 500)
  * positive infinite slope, where p and q have coordinates in [0, 32768)
  * negative infinite slope, where p and q have coordinates in [0, 500)
  * negative infinite slope, where p and q have coordinates in [0, 32768)
  * positive zero     slope, where p and q have coordinates in [0, 500)
  * positive zero     slope, where p and q have coordinates in [0, 32768)
  * symmetric for random points p and q with coordinates in [0, 500)
  * symmetric for random points p and q with coordinates in [0, 32768)
  * transitive for random points p, q, and r with coordinates in [0, 500)
  * transitive for random points p, q, and r with coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 500)
  * slopeTo(), where p and q have coordinates in [0, 32768)
  * slopeTo(), where p and q have coordinates in [0, 10)
  * throw a java.lang.NullPointerException if argument is null
==> passed

Test 2: p.compareTo(q)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p and q have coordinates in [0, 500)
  * antisymmetric, where p and q have coordinates in [0, 32768)
  * transitive, where p, q, and r have coordinates in [0, 500)
  * transitive, where p, q, and r have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 500)
  * sign of compareTo(), where p and q have coordinates in [0, 32768)
  * sign of compareTo(), where p and q have coordinates in [0, 10)
  * throw java.lang.NullPointerException exception if argument is null
==> passed

Test 3: p.slopeOrder().compare(q, r)
  * reflexive, where p and q have coordinates in [0, 500)
  * reflexive, where p and q have coordinates in [0, 32768)
  * antisymmetric, where p, q, and r have coordinates in [0, 500)
  * antisymmetric, where p, q, and r have coordinates in [0, 32768)
  * transitive, where p, q, r, and s have coordinates in [0, 500)
  * transitive, where p, q, r, and s have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 500)
  * sign of compare(), where p, q, and r have coordinates in [0, 32768)
  * sign of compare(), where p, q, and r have coordinates in [0, 10)
  * throw java.lang.NullPointerException if either argument is null
==> passed


Total: 3/3 tests passed!


================================================================
********************************************************************************
*  TESTING CORRECTNESS (substituting reference Point and LineSegment)
********************************************************************************

Testing correctness of BruteCollinearPoints
*-----------------------------------------------------------
Running 17 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - no 5 (or more) points are collinear
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 6: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 7: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 8: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 9: random line segments
  *  1 random line segment
  *  5 random line segments
  * 10 random line segments
  * 15 random line segments
==> passed

Test 10: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 11: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 12: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 13: throws an exception if either the constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 14: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 17/17 tests passed!


================================================================
Testing correctness of FastCollinearPoints
*-----------------------------------------------------------
Running 21 total tests.

The inputs satisfy the following conditions:
  - no duplicate points
  - all x- and y-coordinates between 0 and 32,767

Test 1: points from a file
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 2a: points from a file with horizontal line segments
  * filename = horizontal5.txt
  * filename = horizontal25.txt
  * filename = horizontal50.txt
  * filename = horizontal75.txt
  * filename = horizontal100.txt
==> passed

Test 2b: random horizontal line segments
  *  1 random horizontal line segment
  *  5 random horizontal line segments
  * 10 random horizontal line segments
  * 15 random horizontal line segments
==> passed

Test 3a: points from a file with vertical line segments
  * filename = vertical5.txt
  * filename = vertical25.txt
  * filename = vertical50.txt
  * filename = vertical75.txt
  * filename = vertical100.txt
==> passed

Test 3b: random vertical line segments
  *  1 random vertical line segment
  *  5 random vertical line segments
  * 10 random vertical line segments
  * 15 random vertical line segments
==> passed

Test 4a: points from a file with no line segments
  * filename = random23.txt
  * filename = random38.txt
  * filename = random91.txt
  * filename = random152.txt
==> passed

Test 4b: random points with no line segments
  *  5 random points
  * 10 random points
  * 20 random points
  * 50 random points
==> passed

Test 5a: points from a file with 5 or more on some line segments
  * filename = input9.txt
  * filename = input10.txt
  * filename = input20.txt
  * filename = input50.txt
  * filename = input80.txt
  * filename = input300.txt
  * filename = inarow.txt
==> passed

Test 5b: points from a file with 5 or more on some line segments
  * filename = kw1260.txt
  * filename = rs1423.txt
==> passed

Test 6: points from a file with fewer than 4 points
  * filename = input1.txt
  * filename = input2.txt
  * filename = input3.txt
==> passed

Test 7: check for dependence on either compareTo() or compare()
        returning { -1, +1, 0 } instead of { negative integer,
        positive integer, zero }
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = input299.txt
==> passed

Test 8: check for fragile dependence on return value of toString()
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
==> passed

Test 9: random line segments, none vertical or horizontal
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 10: random line segments
  *  1 random line segment
  *  5 random line segments
  * 25 random line segments
  * 50 random line segments
  * 100 random line segments
==> passed

Test 11: random distinct points in a given range
  * 5 random points in a 10-by-10 grid
  * 10 random points in a 10-by-10 grid
  * 50 random points in a 10-by-10 grid
  * 90 random points in a 10-by-10 grid
  * 200 random points in a 50-by-50 grid
==> passed

Test 12: m*n points on an m-by-n grid
  * 3-by-3 grid
  * 4-by-4 grid
  * 5-by-5 grid
  * 10-by-10 grid
  * 20-by-20 grid
  * 5-by-4 grid
  * 6-by-4 grid
  * 10-by-4 grid
  * 15-by-4 grid
  * 25-by-4 grid
==> passed

Test 13: check that data type is immutable by testing whether each method
         returns the same value, regardless of any intervening operations
  * input8.txt
  * equidistant.txt
==> passed

Test 14: check that data type does not mutate the constructor argument
  * input8.txt
  * equidistant.txt
==> passed

Test 15: numberOfSegments() is consistent with segments()
  * filename = input8.txt
  * filename = equidistant.txt
  * filename = input40.txt
  * filename = input48.txt
  * filename = horizontal5.txt
  * filename = vertical5.txt
  * filename = random23.txt
==> passed

Test 16: throws an exception if either constructor argument is null
         or any entry in array is null
  * argument is null
  * Point[] of length 10, number of null entries = 1
  * Point[] of length 10, number of null entries = 10
  * Point[] of length 4, number of null entries = 1
  * Point[] of length 3, number of null entries = 1
  * Point[] of length 2, number of null entries = 1
  * Point[] of length 1, number of null entries = 1
==> passed

Test 17: check that the constructor throws an exception if duplicate points
  * 50 points
  * 25 points
  * 5 points
  * 4 points
  * 3 points
  * 2 points
==> passed


Total: 21/21 tests passed!


================================================================
********************************************************************************
*  MEMORY
********************************************************************************

Computing memory of Point
*-----------------------------------------------------------
Running 1 total tests.

The maximum amount of memory per Point object is 32 bytes.

Student memory = 24 bytes (passed)

Total: 1/1 tests passed!

================================================================



********************************************************************************
*  TIMING                                                                  
********************************************************************************

Timing BruteCollinearPoints
*-----------------------------------------------------------
Running 10 total tests.

Test 1a-1e: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.01        3640           0           3640                  167         
=> passed    32   0.00       71920           0          71920                  618         
=> passed    64   0.02     1270752           0        1270752                 2322         
=> passed   128   0.14    21336000           0       21336000                 8865         
=> passed   256   0.62   349585280           0      349585280                34368         
==> 5/5 tests passed

Test 2a-2e: Find collinear points among n/4 arbitrary line segments


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    16   0.00        3840           0           3840                  165         
=> passed    32   0.00       72592           0          72592                  613         
=> passed    64   0.01     1273922           0        1273922                 2329         
=> passed   128   0.14    21349770           0       21349770                 8865         
=> passed   256   1.63   349639558           0      349639558                34376         
==> 5/5 tests passed

Total: 10/10 tests passed!


================================================================



Timing FastCollinearPoints
*-----------------------------------------------------------
Running 31 total tests.

Test 1a-1g: Find collinear points among n random distinct points


                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.02        8064       18438          44940                 2492         
=> passed   128   0.01       32512       87696         207904                 9253         
=> passed   256   0.04      130560      410257         951074                34857         
=> passed   512   0.16      523264     1884567        4292398               136092         
=> passed  1024   0.38     2095101     8489527       19074155               535183         
=> passed  2048   1.07     8384458    37862699       84109856              2124769         
==> 6/6 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (84109856 / 19074155) = 2.14
=> passed

==> 7/7 tests passed

Test 2a-2g: Find collinear points among the n points on an n-by-1 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        4096        3968          12032                 2489         
=> passed   128   0.00       16384       16128          48640                 9279         
=> passed   256   0.00       65536       65024         195584                35182         
=> passed   512   0.01      262144      261120         784384               136893         
=> passed  1024   0.05     1048576     1046528        3141632               536655         
=> passed  2048   0.10     4194304     4190208       12574720              2126490         
=> passed  4096   0.34    16777216    16769024       50315264              8452983         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (50315264 / 12574720) = 2.00
=> passed

==> 8/8 tests passed

Test 3a-3g: Find collinear points among the n points on an n/4-by-4 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6228       16222          38672                 2819         
=> passed   128   0.00       24916       58163         141242                10645         
=> passed   256   0.01       99668      152338         404344                40784         
=> passed   512   0.02      398676      546156        1490988               158478         
=> passed  1024   0.08     1594708     2080221        5755150               624697         
=> passed  2048   0.20     6378836     8125112       22629060              2475002         
=> passed  4096   0.72    25515348    32104200       89723748              9846715         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (89723748 / 22629060) = 1.99
=> passed

==> 8/8 tests passed

Test 4a-4g: Find collinear points among the n points on an n/8-by-8 grid

                                                      slopeTo()
             n    time     slopeTo()   compare()  + 2*compare()        compareTo()
-----------------------------------------------------------------------------------------------
=> passed    64   0.00        6252       17691          41634                 2803         
=> passed   128   0.00       25040       80299         185638                10498         
=> passed   256   0.01      100184      311802         723788                40300         
=> passed   512   0.02      400776      859701        2120178               157173         
=> passed  1024   0.06     1603124     3252409        8107942               619631         
=> passed  2048   0.23     6412532    12677306       31767144              2452254         
=> passed  4096   0.89    25650156    50035440      125721036              9759915         
==> 7/7 tests passed

lg ratio(slopeTo() + 2*compare()) = lg (125721036 / 31767144) = 1.98
=> passed

==> 8/8 tests passed

Total: 31/31 tests passed!


================================================================
